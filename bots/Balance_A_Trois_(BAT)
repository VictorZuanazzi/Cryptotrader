################################ CREDITS #######################################
    #Balance A Trois (BAT)
    #23/08/2017
    #Developed by EuroTurtle
    #Contact: victorzuanazzi@gmail.com
    https://cryptotrader.org/backtests/tdZ2h23csKXsewgm8
############################## END OF CREDITS ##################################  

################################ HEAD ##########################################
trading = require 'trading'
params = require 'params'
ds = require 'datasources'

ds.add 'poloniex', 'eth_btc', '4h'
ds.add 'poloniex', 'etc_eth', '4h'
ds.add 'poloniex', 'etc_btc', '4h'
#ds.add 'kraken', 'xbt_usd' #, '4h'

#those will be parameters taht the user can change:
MINIMUM_AMOUNT = .0002 #Minimum tradable amount.
FEE = 0.0025
TIME_OUT=10
SAFETY_FACTOR = 0.9999
ICEBERG = 1
################################ END OF HEAD ###################################
    
init: ->
    #This runs once when the bot is started
    info "Balance A Trois (BAT)"
    info "By: EuroTurtle"
    info "Donations BTC: 34MC3qweX3Y7sJSWDV5rcfU8brsjy5noJ4"
    info "Donations ETH: 0x3ED65a6d75b69C162De1379A2ccfc26efF3845c3"
    
handle: ->
######################### INITIALIZING VARIABLES ###############################
    storage.botStartedAt ?= data.at
    storage.finishChain ?= 0
    numberOfPairs = @data.instruments.length-1 #used for multiple pairs of trade
    instrument = [0.. numberOfPairs]
    currencyAvailable = [0.. numberOfPairs]
    assetsAvailable = [0.. numberOfPairs]
    sequence = [0.. 2]
    actions = [0.. 4]
    
    instrument[0] = @data.instruments[0]
    total = @portfolio.positions[instrument[0].curr()].amount
    for i in [1..@data.instruments.length-1] # skip primary instrument as we do no trade with it
        instrument[i] = @data.instruments[i]
        if instrument[i].price
            total += @portfolio.positions[instrument[i].asset()].amount * instrument[i].price
            currencyAvailable[i] = @portfolios[instrument[i].market].positions[instrument[i].curr()].amount
            assetsAvailable[i] = @portfolios[instrument[i].market].positions[instrument[i].asset()].amount
    #debug "Total portfolio: #{total} #{instrument[0].curr().toUpperCase()}"
    storage.firstBalance ?= total
    storage.currentBalance = total
    storage.BHbitcoin ?= total/instrument[1].price
    storage.BHether ?= total/instrument[3].price
    
    direction = 0
    trade = 0
    tradeTry = 5
######################### VARIABLES INITIALIZED ################################

######################### DEFINING TRADE STRATEGY ##############################

    factor = instrument[1].price*instrument[2].price/instrument[3].price
    if factor < 1
        sequence = [1, 2, 3] #define the sequence of the trades that must happen.
        actions = [0, -1, -1, 1] # -1= buy, 1=sell
        # if factor < 1 buy asset of pair 1, buy asset of pair 2 and sell asset of pair 3
    else if factor > 1
        sequence = [3, 2, 1] #define the sequence of the trades that must happen.
        actions = [0, 1, 1, -1] # -1= buy, 1=sell
        #if factor > 1, buy asset of pair 3, sell asset of pair 2, seel asset of pair 1

    if storage.finishChain == 1 # 0 signals that no past trade has to be completed, 1 signals that there were uncompleted trades last tic that must be completed in this one to minimize losses.
        debug "finishing last's tick trade..."
######################### TRADE STRATEGY DEFINED ###############################

######################### EXECUTING TRADES #####################################
    j = 0
    if factor < (1-3*FEE) or factor > (1+3*FEE) or storage.finishChain == 1
        #Displays the sequence of coins to be traded:
        if sequence[0] == 1
            debug "direction: #{instrument[1].curr().toUpperCase()} >> #{instrument[2].curr().toUpperCase()} >> #{instrument[2].asset().toUpperCase()} >> #{instrument[1].curr().toUpperCase()} "
        else debug "direction: #{instrument[1].curr().toUpperCase()} >> #{instrument[3].asset().toUpperCase()} >> #{instrument[3].curr().toUpperCase()} >> #{instrument[1].curr().toUpperCase()} "
        #Trades the coins in the desired sequence:
        for i in sequence #trade the pairs in the sequence defined by the strategy.
            tradeTry = 5 #number of attempts to complete the trade 
            currencyAvailable[i] = @portfolios[instrument[i].market].positions[instrument[i].curr()].amount #refreshes the currency available for the pair
            assetsAvailable[i] = @portfolios[instrument[i].market].positions[instrument[i].asset()].amount #refreshes the asset available for the pair
            debug "currencyAvailable[#{i}] = #{currencyAvailable[i]} #{instrument[i].curr().toUpperCase()} || assetsAvailable[#{i}] = #{assetsAvailable[i]} #{instrument[i].asset().toUpperCase()}"
            #BUY or SELL the coin as it is defined by the strategy:
            if actions[i] == -1 # BUY // -1 means buy
                buyAmount = (currencyAvailable[i]/instrument[i].price)*SAFETY_FACTOR # calculates the how much it is possible to buy
                #makes an ICEBERG order if that is the first transaction of the series:
                if (i == 1 or i == 3) # depending of the direction, the first buy will come from pair 1 or pair 3. 
                    buyAmount = buyAmount/ICEBERG
                debug "buyAmount #{buyAmount} #{instrument[i].asset().toUpperCase()}"
                #Check if there enough funding to make the order:
                if buyAmount > MINIMUM_AMOUNT/instrument[i].price # only trades if there is enough funds 
                    #If the order is not filled by the time TIMEOUT is reached, the bot makes another attempt to finish the transaction:
                    while tradeTry > 0 
                        if (trading.buy instrument[i], 'market', buyAmount, null, TIME_OUT) #, instrument[i].price)
                            storage.finishChain = 0
                            trade = 1
                            tradeTry = 0
                        else
                            tradeTry = tradeTry - 1
                            if tradeTry == 0
                                warn "TRADE #{i} NOT COMPLETED"
                            if (i == 2) #if the first transaction does not go through, there is no need to finish the transaction on the next tic.
                                storage.finishChain = 1 
            else if actions[i] == 1 # SELL // 1 means sell
                sellAmount = assetsAvailable[i] 
                debug "sellAmount #{sellAmount} #{instrument[i].asset().toUpperCase()}"
                #Check if there enough funding to make the order:
                if sellAmount > MINIMUM_AMOUNT/instrument[i].price
                    #If the order is not filled by the time TIMEOUT is reached, the bot makes another attempt to finish the transaction:
                    while tradeTry > 0
                        if (trading.sell instrument[i], 'market', sellAmount, null, TIME_OUT) #, instrument[i].price)
                            storage.finishChain = 0 
                            trade = 1
                            tradeTry = 0
                        else 
                            storage.finishChain = 1 #the first transaction is always a buy, so no need for a if here.
                            tradeTry = tradeTry - 1
                            if tradeTry == 0
                                warn "TRADE #{i} NOT COMPLETED"
######################### TRADES EXECUTED ######################################

############################## END OF TIC ######################################

    if (storage.finishChain == 1)
        warn "#ERROR: problems found to finish the transaction"
        currencyAvailable[1] = @portfolios[instrument[1].market].positions[instrument[1].curr()].amount
        debug "#{instrument[1].curr().toUpperCase()}: #{currencyAvailable[1]}"
        assetsAvailable[1] = @portfolios[instrument[1].market].positions[instrument[1].asset()].amount
        debug "#{instrument[1].asset().toUpperCase()}: #{assetsAvailable[1]}"
        assetsAvailable[3] = @portfolios[instrument[3].market].positions[instrument[3].asset()].amount
        debug "#{instrument[3].asset().toUpperCase()}: #{assetsAvailable[3]}"
    else if(trade == 1 )
        info "All trades completed"
    
    currencyAvailable[1] = @portfolios[instrument[1].market].positions[instrument[1].curr()].amount
    assetsAvailable[1] = @portfolios[instrument[1].market].positions[instrument[1].asset()].amount
    assetsAvailable[3] = @portfolios[instrument[3].market].positions[instrument[3].asset()].amount
    storage.currentBalance = currencyAvailable[1] + assetsAvailable[1]*instrument[1].price + assetsAvailable[3]*instrument[3].price
    yeld = (storage.currentBalance-storage.firstBalance)*100/storage.firstBalance
    BuyHoldB = storage.BHbitcoin*instrument[1].price
    BuyHoldE = storage.BHether*instrument[3].price
    if trade == 1
        debug "Starting balance: #{storage.firstBalance}"
        debug "current balance: #{storage.currentBalance}"
        if yeld > 0
            info "yeld: #{yeld}%"
        else warn "yeld: #{yeld}%"
        debug "B&H #{instrument[1].asset().toUpperCase()}: #{BuyHoldB} #{instrument[1].curr().toUpperCase()} || B&H #{instrument[3].asset().toUpperCase()}: #{BuyHoldE} #{instrument[1].curr().toUpperCase()}"
        warn "##################### BAT ##################################"
    
    if (storage.currentBalance/instrument[1].price < MINIMUM_AMOUNT)
        warn "NOT ENOUGH FUNDS TO MAKE A TRANSACTION"
        warn "please assure funding above #{MINIMUM_AMOUNT*intrument[1].price} #{instrument[1].curr().toUpperCase()}"
        warn "BAT cannot trade with the funds available"
 
 onRestart: ->
    info "_____BAT RESTARTED______"
    debug "Bot restarted at #{new Date(data.at)}"
    debug " "
    info "Balance A Trois (BAT)"
    info "By: EuroTurtle"
    info "Donations BTC: 34MC3qweX3Y7sJSWDV5rcfU8brsjy5noJ4"
    info "Donations ETH: 0x3ED65a6d75b69C162De1379A2ccfc26efF3845c3"
    debug " "
    debug "Starting balance: #{storage.firstBalance}"
    debug "yeld: #{(storage.currentBalance-storage.firstBalance)*100/storage.firstBalance}%"
    #debug "B&H: #{storage.BuyHold}"
    #debug "mean leveage: #{storage.MeanSell/storage.MeanBuy}"
    #debug "leveage accumulated: #{storage.leverageAccumulated}"
    #debug "Bot/B&H: #{(Balance/storage.BuyHold-1)*100}%"  
    debug "_________________________________________________________________"

onStop: ->
    info "_____BAT STOPED____"
    debug "Bot started at #{new Date(storage.botStartedAt)}"
    debug "Bot stopped at #{new Date(data.at)}"
    debug " "
    info "Balance A Trois (BAT)"
    info "By: EuroTurtle"
    info "Donations BTC: 34MC3qweX3Y7sJSWDV5rcfU8brsjy5noJ4"
    info "Donations ETH: 0x3ED65a6d75b69C162De1379A2ccfc26efF3845c3"
    debug " "
    debug "Starting balance: #{storage.firstBalance}"
    debug "yeld: #{(storage.currentBalance-storage.firstBalance)*100/storage.firstBalance}%"
    #debug "B&H: #{storage.BuyHold}"
    #debug "yeld: #{(Balance-storage.firstBalance)*100/storage.firstBalance}%"
    #debug "mean leveage: #{storage.MeanSell/storage.MeanBuy}"
    #debug "leveage accumulated: #{storage.leverageAccumulated}"
    #debug "Bot/B&H: #{(Balance/storage.BuyHold-1)*100}%"  
    debug "_________________________________________________________________"

